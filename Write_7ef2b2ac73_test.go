// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-4

package httpfileserver

import (
	"bytes"
	"testing"
)

type middleware struct {
	Writer       *bytes.Buffer
	bytesWritten *bytes.Buffer
	numBytes     *int
	maxBytes     int64 // change from int to int64
	overflow     *bool
}

func (m middleware) Write(b []byte) (int, error) {
	if int64(len(b))+*m.numBytes < m.maxBytes {
		n, _ := m.bytesWritten.Write(b)
		*m.numBytes += n
	} else {
		*m.overflow = true
	}
	return m.Writer.Write(b)
}

func TestWrite_7ef2b2ac73(t *testing.T) {
	t.Run("success case", func(t *testing.T) {
		numBytes := 0
		overflow := false
		m := middleware{
			Writer:       &bytes.Buffer{},
			bytesWritten: &bytes.Buffer{},
			numBytes:     &numBytes,
			maxBytes:     10,
			overflow:     &overflow,
		}
		data := []byte("hello")
		_, err := m.Write(data)
		if err != nil {
			t.Error(err)
		}
		if *m.overflow {
			t.Error("overflow should not be true")
		}
		if *m.numBytes != len(data) {
			t.Errorf("numBytes should be %d, got %d", len(data), *m.numBytes)
		}
	})

	t.Run("overflow case", func(t *testing.T) {
		numBytes := 0
		overflow := false
		m := middleware{
			Writer:       &bytes.Buffer{},
			bytesWritten: &bytes.Buffer{},
			numBytes:     &numBytes,
			maxBytes:     5,
			overflow:     &overflow,
		}
		data := []byte("hello world")
		_, err := m.Write(data)
		if err != nil {
			t.Error(err)
		}
		if !*m.overflow {
			t.Error("overflow should be true")
		}
		if *m.numBytes != int(m.maxBytes) {
			t.Errorf("numBytes should be %d, got %d", m.maxBytes, *m.numBytes)
		}
	})
}
